{
    "hints": {
        "create_application(asset)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "opt_in_to_asset(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit_asa(axfer)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_asa(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asa_balance()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuYXNhX3ZhdWx0LmNvbnRyYWN0LkFzYVZhdWx0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvYXNhX3ZhdWx0L2NvbnRyYWN0LnB5OjMKICAgIC8vIGNsYXNzIEFzYVZhdWx0KEFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "asa_balance": {
                    "type": "uint64",
                    "key": "asa_balance"
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AsaVault",
        "methods": [
            {
                "name": "create_application",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in_to_asset",
                "args": [
                    {
                        "type": "pay",
                        "name": "mbr_pay"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deposit_asa",
                "args": [
                    {
                        "type": "axfer",
                        "name": "deposit_txn"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw_asa",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_asa_balance",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}